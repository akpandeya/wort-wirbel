name: Create Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        type: choice
        default: 'patch'
        options:
          - major
          - minor
          - patch
      pre_release:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  create-release:
    name: Create Release and Tag
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    outputs:
      new-version: ${{ steps.version.outputs.new-version }}
      release-created: ${{ steps.release.outputs.release-created }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: 'stable'

    - name: Get current version from pubspec.yaml
      id: current-version
      run: |
        CURRENT_VERSION=$(grep '^version:' pubspec.yaml | cut -d' ' -f2 | cut -d'+' -f1)
        echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"

    - name: Calculate new version
      id: version
      run: |
        CURRENT_VERSION="${{ steps.current-version.outputs.current-version }}"
        VERSION_TYPE="${{ inputs.version_type }}"
        
        # Parse version components
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        # Increment based on type
        case $VERSION_TYPE in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"

    - name: Update pubspec.yaml version
      run: |
        NEW_VERSION="${{ steps.version.outputs.new-version }}"
        BUILD_NUMBER=$(date +%s)
        sed -i "s/^version:.*/version: $NEW_VERSION+$BUILD_NUMBER/" pubspec.yaml
        echo "Updated pubspec.yaml to version: $NEW_VERSION+$BUILD_NUMBER"

    - name: Commit version changes
      run: |
        NEW_VERSION="${{ steps.version.outputs.new-version }}"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pubspec.yaml
        git commit -m "chore: bump version to $NEW_VERSION"
        git push

    - name: Create Git tag
      run: |
        NEW_VERSION="${{ steps.version.outputs.new-version }}"
        git tag -a "v$NEW_VERSION" -m "Release version $NEW_VERSION"
        git push origin "v$NEW_VERSION"

    - name: Generate changelog
      id: changelog
      run: |
        NEW_VERSION="${{ steps.version.outputs.new-version }}"
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -n "$PREV_TAG" ]; then
          echo "## Changes since $PREV_TAG" > CHANGELOG.md
          git log --pretty=format:"- %s (%h)" "$PREV_TAG"..HEAD >> CHANGELOG.md
        else
          echo "## Initial Release" > CHANGELOG.md
          echo "- First release of Wort-Wirbel" >> CHANGELOG.md
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      id: release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.new-version }}
        release_name: Release v${{ steps.version.outputs.new-version }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ inputs.pre_release }}

  build-and-push-versioned:
    name: Build and Push Versioned Docker Image
    runs-on: ubuntu-latest
    needs: [create-release]
    if: needs.create-release.outputs.release-created
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: v${{ needs.create-release.outputs.new-version }}

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for versioned image
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ needs.create-release.outputs.new-version }}
          type=raw,value=v${{ needs.create-release.outputs.new-version }}

    - name: Build and push versioned Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ needs.create-release.outputs.new-version }}

    - name: Release Summary
      run: |
        echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "✅ Created release **v${{ needs.create-release.outputs.new-version }}**" >> $GITHUB_STEP_SUMMARY
        echo "🐳 Built Docker images:" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.create-release.outputs.new-version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ needs.create-release.outputs.new-version }}\`" >> $GITHUB_STEP_SUMMARY
