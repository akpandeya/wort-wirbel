name: Build PR Image

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    name: Run Linting
    uses: ./.github/workflows/lint.yml

  test:
    name: Run Tests
    uses: ./.github/workflows/test.yml
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build-pr-image:
    name: Build PR Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    permissions:
      contents: read
      packages: write
      pull-requests: write

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      pr-image-url: ${{ steps.pr-image.outputs.pr-image-url }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract PR metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=pr,prefix=pr-
          type=sha,event=pr,prefix=pr-{{branch}}-
        labels: |
          org.opencontainers.image.title=Wort-Wirbel PR Build
          org.opencontainers.image.description=PR build for Wort-Wirbel German flashcard app
          org.opencontainers.image.source=${{ github.event.repository.html_url }}
          org.opencontainers.image.revision=${{ github.sha }}

    - name: Build and push PR Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=pr-${{ github.event.number }}-${{ github.sha }}

    - name: Extract PR image URL
      id: pr-image
      run: |
        PR_IMAGE_URL="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}"
        echo "pr-image-url=$PR_IMAGE_URL" >> $GITHUB_OUTPUT
        echo "PR Image URL: $PR_IMAGE_URL"

    - name: Comment PR with image information
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = context.issue.number;
          const imageUrl = '${{ steps.pr-image.outputs.pr-image-url }}';
          const commitSha = context.sha.substring(0, 7);
          
          const comment = `## 🐳 PR Docker Image Built
          
          **Image URL**: \`${imageUrl}\`
          **Commit**: \`${commitSha}\`
          **Build**: [View logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ### Available Tags:
          - \`pr-${prNumber}\`
          - \`pr-${{ github.head_ref }}-${commitSha}\`
          
          ### Deploy this PR:
          You can deploy this specific PR build using the [Deploy Specific Version](${{ github.server_url }}/${{ github.repository }}/actions/workflows/deploy-version.yml) workflow with the image tag \`pr-${prNumber}\`.
          
          ---
          *This image will not be tagged as \`latest\` and won't affect production deployments.*`;
          
          github.rest.issues.createComment({
            issue_number: prNumber,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  validate-pr-deployment:
    name: Validate PR Image Can Be Deployed
    runs-on: ubuntu-latest
    needs: [build-pr-image]
    if: success()

    steps:
    - name: Validate image manifest
      run: |
        echo "Validating PR image can be deployed..."
        docker manifest inspect ${{ needs.build-pr-image.outputs.pr-image-url }}
        echo "✅ PR image is valid and ready for deployment testing"

    - name: PR Validation Summary
      run: |
        echo "## PR Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "✅ **PR image built successfully**" >> $GITHUB_STEP_SUMMARY
        echo "🔍 **Image validated and ready for testing**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Image Details:" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: \`${{ needs.build-pr-image.outputs.pr-image-url }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Digest**: \`${{ needs.build-pr-image.outputs.image-digest }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **PR**: #${{ github.event.number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: \`${{ github.head_ref }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "- Use \`pr-${{ github.event.number }}\` tag to deploy this PR for testing" >> $GITHUB_STEP_SUMMARY
        echo "- This image will **not** be tagged as \`latest\`" >> $GITHUB_STEP_SUMMARY
        echo "- Production deployments remain unaffected" >> $GITHUB_STEP_SUMMARY
